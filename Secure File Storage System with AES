import os
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet
import base64
import getpass

def generate_key(password: str, salt: bytes) -> bytes:
    """Derive AES key from password + salt."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=390000,
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def encrypt_file(file_path, password):
    if not os.path.isfile(file_path):
        print("‚ùå File not found.")
        return

    with open(file_path, 'rb') as f:
        data = f.read()

    salt = os.urandom(16)
    key = generate_key(password, salt)
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data)

    with open(file_path + ".enc", 'wb') as f:
        f.write(salt + encrypted)

    print(f"‚úÖ Encrypted: {file_path}.enc")

def decrypt_file(file_path, password):
    if not os.path.isfile(file_path):
        print("‚ùå Encrypted file not found.")
        return

    with open(file_path, 'rb') as f:
        content = f.read()

    salt = content[:16]
    encrypted = content[16:]

    key = generate_key(password, salt)
    fernet = Fernet(key)
    try:
        decrypted = fernet.decrypt(encrypted)
    except Exception:
        print("‚ùå Wrong password or corrupt file.")
        return

    out_path = file_path.replace(".enc", ".decrypted")
    with open(out_path, 'wb') as f:
        f.write(decrypted)

    print(f"‚úÖ Decrypted: {out_path}")

def main():
    print("üîê Secure File Locker üîê")
    print("1. Encrypt a file")
    print("2. Decrypt a file")
    choice = input("Choose (1 or 2): ")

    path = input("Enter full path to the file: ")
    password = getpass.getpass("Enter password: ")

    if choice == '1':
        encrypt_file(path, password)
    elif choice == '2':
        decrypt_file(path, password)
    else:
        print("Invalid choice")

if __name__ == '__main__':
    main()
