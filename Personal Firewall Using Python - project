#!/usr/bin/env python3
"""
Simple Personal Firewall
â€¢ Logs ALL packets
â€¢ Blocks chosen IPs and ports using iptables
Run with sudo/root.
"""

from scapy.all import sniff
import subprocess
import datetime

# â”€â”€â”€ CONFIGURE YOUR RULES HERE â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ALLOWED_IPS   = ['192.168.1.1']        # always allowed
BLOCKED_IPS   = ['10.10.10.10']        # dropped with iptables
BLOCKED_PORTS = [80, 443]              # e.g., block HTTP/HTTPS
LOG_FILE      = "firewall_logs.txt"
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€


def iptables_drop_ip(ip):
    """Insert an iptables rule to drop traffic from a given IP."""
    subprocess.call(
        ["iptables", "-C", "INPUT", "-s", ip, "-j", "DROP"],
        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )
    # If rule doesnâ€™t exist, add (-C exits non-zero â†’ add rule)
    if subprocess.call(["echo", "$?"]) != 0:
        subprocess.call(["iptables", "-A", "INPUT", "-s", ip, "-j", "DROP"])


def iptables_drop_port(port):
    """Insert an iptables rule to drop TCP traffic to a port."""
    rule = ["iptables", "-C", "INPUT", "-p", "tcp", "--dport", str(port), "-j", "DROP"]
    if subprocess.call(rule, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) != 0:
        subprocess.call(["iptables", "-A", "INPUT", "-p", "tcp", "--dport",
                         str(port), "-j", "DROP"])


def packet_callback(pkt):
    """Handle each captured packet."""
    if not pkt.haslayer("IP"):
        return

    src = pkt["IP"].src
    dst = pkt["IP"].dst
    sport = pkt["TCP"].sport if pkt.haslayer("TCP") else "-"
    dport = pkt["TCP"].dport if pkt.haslayer("TCP") else "-"

    # Decide status
    if src in ALLOWED_IPS:
        status = "ALLOWED"
    elif src in BLOCKED_IPS:
        status = "BLOCKED_IP"
        iptables_drop_ip(src)
    elif pkt.haslayer("TCP") and dport in BLOCKED_PORTS:
        status = "BLOCKED_PORT"
        iptables_drop_port(dport)
    else:
        status = "LOGGED"

    # Log to file
    with open(LOG_FILE, "a") as f:
        f.write(f"{datetime.datetime.now()} {status} SRC:{src}:{sport} "
                f"DST:{dst}:{dport}\n")

    # Print brief summary
    print(f"{status:12} {src}:{sport} -> {dst}:{dport}")


def main():
    print("ðŸ”¥ Personal Firewall started (Ctrl+C to stop)")
    print(f"Logging to {LOG_FILE}")
    sniff(prn=packet_callback, store=False)


if __name__ == "__main__":
    main()
